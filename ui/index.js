module.exports = (api) => {
    api.describeConfig({
        // Unique ID for the config
        id: 'org.kubevue',
        // Displayed name
        name: 'Kubevue',
        // Shown below the name
        description: 'Kubevue configuration',
        // "More info" link
        link: 'https://github.com/saashqdev/vue-cli-plugin-kubevue',
        icon: 'settings',
        files: {
            // vue: {
            //     js: ['vue.config.js'],
            // },
            kubevue: {
                js: ['kubevue.config.js'],
            },
        },

        // other config properties
        onRead: ({ data, cwd }) => ({
            prompts: [{
                name: 'type',
                message: 'Project type',
                type: 'list',
                default: '',
                value: data.kubevue.type,
                description: 'Kubevue project type. ',
                group: 'Basic settings',
                choices: [{
                    name: 'Web application',
                    value: 'app',
                }, {
                    name: 'Component library',
                    value: 'library',
                }, {
                    name: 'Component',
                    value: 'component',
                }, {
                    name: 'Block',
                    value: 'block',
                }, {
                    name: 'Material warehouse',
                    value: 'repository',
                }],
            }, {
                name: 'outputPath',
                message: 'Output directory',
                type: 'input',
                default: '',
                value: data.kubevue.outputPath,
                description: 'The files generated by the build will be generated here. If set, overrides the Vue CLI configuration. ',
                group: 'Basic settings',
            }, {
                name: 'publicPath',
                message: 'Public path',
                type: 'input',
                default: '',
                value: data.kubevue.publicPath,
                description: `The deployment address of the application. Such as '/my-app/'. If set, overrides the Vue CLI configuration. `,
                group: 'Basic settings',
            }, {
                name: 'staticPath',
                message: 'Static resource directory',
                type: 'input',
                default: '',
                value: data.kubevue.staticPath,
                description: `When building, all resources in this directory will be copied to the output directory as they are. `,
                group: 'Basic settings',
            }, {
                name: 'srcPath',
                message: 'Source file directory',
                type: 'input',
                default: './src',
                value: data.kubevue.srcPath,
                description: `Source file directory. The alias '@' is automatically registered in the project. `,
                group: 'Basic settings',
            }, {
                name: 'libraryPath',
                message: 'Project library directory',
                type: 'input',
                default: '',
                value: data.kubevue.libraryPath,
                description: `Project library directory. Leave blank by default, indicating consistency with 'srcPath'. The alias '@@' is automatically registered in the project. `,
                group: 'Basic settings',
            }, {
                name: 'baseCSSPath',
                message: 'Basic style path',
                type: 'input',
                default: '',
                value: data.kubevue.baseCSSPath,
                description: `The path to the basic style (such as reset style). If left blank by default, '@/base/base.css' will be searched. The alias 'baseCSS' is automatically registered in the project. `,
                group: 'Basic settings',
            }, {
                name: 'theme',
                message: 'Set theme',
                type: 'input',
                default: undefined,
                value: data.kubevue.theme,
                description: `The path where the theme CSS is located, the theme name is the CSS name. Can also be an object. `,
                group: 'Basic settings',
            }, {
                name: 'applyTheme',
                message: 'Application theme',
                type: 'confirm',
                default: false,
                value: data.kubevue.applyTheme,
                description: `Inject theme variables into CSS. If you need to be compatible with IE browser, it must be turned on. `,
                group: 'Basic settings',
            }],
        }),

        async onWrite({ data, prompts, api }) {
            const result = {};
            await Promise.all(prompts.map((prompt) => api.getAnswer(prompt.id)
                .then((answer) => result[prompt.id] = answer)));
            api.assignData('kubevue', result);
        },
    });

    api.describeTask({
        match: /vue-cli-service library-build.+?--kubevue-mode raw/,
        description: 'Build library (native mode, does not handle babel, font, sprite, etc.)',
        icon: 'archive',
        // link:
    });

    api.describeTask({
        match: /vue-cli-service library-build(\s|$)/,
        description: 'Build library',
        icon: 'archive',
        // link:
    });

    api.describeTask({
        match: /vue-cli-service doc(\s|$)/,
        description: 'Development Document',
        icon: 'photo',
        // link:
    });

    api.describeTask({
        match: /vue-cli-service doc-build(\s|$)/,
        description: 'Build documentation',
        icon: 'photo_album',
        // link:
    });
};
